/*
Copyright 2020 The arhat.dev Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package network

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"strconv"
	"text/template"
)

const resolvConfTemplate = `# resolv.conf generated by ext.arhat.dev/runtimeutil
{{ range .Servers -}}
nameserver {{ . }}
{{ end -}}
search {{- range .Searches }} {{ . }} {{- end }}
{{ if gt (len .Options) 0 -}}
options {{- range .Options }} {{ . }} {{- end -}}
{{ end }}
`

// AbbotExecFunc execute abbot command with provided environment variables and io channels
type AbbotExecFunc func(
	ctx context.Context,
	env map[string]string,
	stdin io.Reader,
	stdout, stderr io.Writer,
) error

func NewClient(exec AbbotExecFunc) *Client {
	return &Client{
		execAbbot: exec,
	}
}

type Client struct {
	execAbbot AbbotExecFunc
}

func (c *Client) CreateResolvConf(nameservers, searches, options []string) ([]byte, error) {
	resolvTemplate, err := template.New("").Parse(resolvConfTemplate)
	if err != nil {
		return nil, fmt.Errorf("failed to parse resolv.conf template")
	}

	if len(nameservers) == 0 {
		nameservers = []string{"::1", "127.0.0.1"}
	}

	if len(searches) == 0 {
		searches = []string{"."}
	}

	buf := new(bytes.Buffer)
	err = resolvTemplate.Execute(buf, map[string][]string{
		"Servers":  nameservers,
		"Searches": searches,
		"Options":  options,
	})
	if err != nil {
		return nil, fmt.Errorf("failed to execute resolve.conf template")
	}

	return buf.Bytes(), nil
}

// Do host/container network operation by executing abbot command
func (c *Client) Do(
	ctx context.Context,
	abbotReqData []byte,
	pid int64,
	containerID string,
) (abbotRespData []byte, err error) {
	buf := new(bytes.Buffer)
	errBuf := new(bytes.Buffer)

	err = c.execAbbot(
		ctx,
		map[string]string{
			"ABBOT_REQ_CONTAINER_ID":  containerID,
			"ABBOT_REQ_CONTAINER_PID": strconv.FormatInt(pid, 10),
		},
		bytes.NewReader(abbotReqData),
		buf,
		errBuf,
	)
	if err != nil {
		return nil, err
	}

	errStr := errBuf.String()
	if len(errStr) != 0 {
		return nil, fmt.Errorf(errStr)
	}

	return buf.Bytes(), nil
}

// Restore container network by executing abbot command
func (c *Client) Restore(
	ctx context.Context, pid int64, containerID string,
) error {
	errBuf := new(bytes.Buffer)
	err := c.execAbbot(
		ctx,
		map[string]string{
			"ABBOT_REQ_CONTAINER_ID":  containerID,
			"ABBOT_REQ_CONTAINER_PID": strconv.FormatInt(pid, 10),
			"ABBOT_REQ_ACTION":        "container:restore",
		},
		nil,
		nil,
		errBuf,
	)
	if err != nil {
		return err
	}

	errStr := errBuf.String()
	if len(errStr) != 0 {
		return fmt.Errorf(errStr)
	}

	return nil
}

// Query container network by executing abbot command
func (c *Client) Query(ctx context.Context, pid int64, containerID string) ([]byte, error) {
	buf := new(bytes.Buffer)
	errBuf := new(bytes.Buffer)

	err := c.execAbbot(
		ctx,
		map[string]string{
			"ABBOT_REQ_CONTAINER_ID":  containerID,
			"ABBOT_REQ_CONTAINER_PID": strconv.FormatInt(pid, 10),
			"ABBOT_REQ_ACTION":        "container:query",
		},
		nil,
		buf,
		errBuf,
	)
	if err != nil {
		return nil, err
	}

	errStr := errBuf.String()
	if len(errStr) != 0 {
		return nil, fmt.Errorf(errStr)
	}

	return buf.Bytes(), nil
}

// Delete container network by executing abbot command
func (c *Client) Delete(ctx context.Context, pid int64, containerID string) error {
	errBuf := new(bytes.Buffer)
	err := c.execAbbot(
		ctx,
		map[string]string{
			"ABBOT_REQ_CONTAINER_ID":  containerID,
			"ABBOT_REQ_CONTAINER_PID": strconv.FormatInt(pid, 10),
			"ABBOT_REQ_ACTION":        "container:delete",
		},
		nil,
		nil,
		errBuf,
	)
	if err != nil {
		return err
	}

	errStr := errBuf.String()
	if len(errStr) != 0 {
		return fmt.Errorf(errStr)
	}

	return nil
}
